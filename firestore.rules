rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function isAllowedUsername(user) {
      return user.size() > 2 && user.size() < 16 && user.matches('[0-9A-Za-z_]+') == true;
    }

    match /comments/{commentId} {
      allow read;
      allow create: if request.resource.data.size() == 3
        && request.resource.data.comment is string
        && exists(/databases/$(database)/documents/posts/$(request.resource.data.postId))
        && request.auth.uid == get(/databases/$(database)/documents/users/$(request.resource.username)).id;
    }

    match /likes/{likeId} {
      allow read;
      allow create: if request.resource.id == request.auth.uid + '_' + request.resource.data.postId
        && request.resource.data.size() == 2
        && request.resource.data.postId is string
        && request.resource.data.userId is string;
      allow delete: if request.auth.uid == resource.data.userId;
    }

    match /notifications/{notificationId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId
        && request.resource.data.keys().hasOnly([
          'createdAt', 'fromUserId', 'imageUrl', 'postId', 'read', 'type', 'userId'
        ])
        && request.resource.data.createdAt == resource.data.createdAt
        && request.resource.data.fromUserId == resource.data.fromUserId
        && request.resource.data.imageUrl == resource.data.imageUrl
        && request.resource.data.postId == resource.data.postId
        && request.resource.data.read is bool
        && request.resource.data.type == resource.data.type
        && request.resource.data.userId == resource.data.userId;
    }

    match /posts/{postId} {
      allow create: if request.resource.data.userId == request.auth.uid
        && request.resource.data.published == false
        && !('likes' in request.resource.data);
      allow read: if resource.data.published == true
        || request.auth.uid == resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId
        && (resource.data.published == false || request.resource.data.keys().hasOnly(['caption']));
      allow delete: if request.auth.uid == resource.data.userId;
    }

    match /users/{user} {
      allow read;
      allow update: if resource.data.id == null && isAllowedUsername(user);
      allow create: if request.auth == null && isAllowedUsername(user);
      allow delete: if resource.data.id == null;
    }
  }
}
