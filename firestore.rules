rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    match /comments/{commentId} {
      allow read;
      allow create: if request.resource.data.keys().hasOnly(['comment', 'createdAt', 'postId', 'userId'])
        && request.resource.data.comment is string
        && request.resource.data.createdAt is timestamp
        && exists(/databases/$(database)/documents/posts/$(request.resource.data.postId))
        && request.auth.uid == request.resource.data.userId;
    }

    match /likes/{likeId} {
      allow read;
      allow create: if request.resource.id == request.auth.uid + '_' + request.resource.data.postId
        && request.resource.data.size() == 2
        && request.resource.data.postId is string
        && request.resource.data.userId is string;
      allow delete: if request.auth.uid == resource.data.userId;
    }

    match /notifications/{notificationId} {
      allow read: if request.auth.uid == resource.data.userId;
      allow update: if request.auth.uid == resource.data.userId
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['read'])
        && request.resource.data.read is bool;
    }

    match /posts/{postId} {
      allow read:
        if resource.data.published == true
        || request.auth.uid == resource.data.userId;

      allow create:
        if request.resource.data.keys().hasOnly(
          ['caption', 'createdAt', 'imageUrl', 'published', 'userId']
        )
        && request.resource.data.caption is string
        && request.resource.data.createdAt is timestamp
        && request.resource.data.imageUrl == null
        && request.resource.data.published == false
        && request.resource.data.userId == request.auth.uid;

      allow update:
        if request.auth.uid == resource.data.userId
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(
          ['imageUrl', 'published']
        )
        && request.resource.data.imageUrl is string
        && request.resource.data.published == true;

      allow update:
        if request.resource.data.diff(resource.data).affectedKeys().hasOnly(['likes'])
        && (
          !('likes' in resource.data)
          || request.resource.data.likes.diff(resource.data.likes).affectedKeys().hasOnly([request.auth.uid])
        )
        && (request.resource.data.likes[request.auth.uid] == true || !(request.auth.uid in request.resource.data.likes));

      allow delete:
        if request.auth.uid == resource.data.userId;
    }

    match /users_2/{userId} {
      allow read;
    }
  }
}
